{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "97e7f698-0087-42ae-86b4-c0dee9a4b532",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tkinter as tk\n",
    "from tkinter import ttk, messagebox\n",
    "import sqlite3\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Database setup\n",
    "def setup_db():\n",
    "    conn = sqlite3.connect(\"expenses.db\")\n",
    "    cursor = conn.cursor()\n",
    "    cursor.execute(\"\"\"\n",
    "        CREATE TABLE IF NOT EXISTS expenses (\n",
    "            id INTEGER PRIMARY KEY AUTOINCREMENT,\n",
    "            date TEXT,\n",
    "            category TEXT,\n",
    "            amount REAL\n",
    "        )\n",
    "    \"\"\")\n",
    "    conn.commit()\n",
    "    conn.close()\n",
    "\n",
    "setup_db()\n",
    "\n",
    "# Function to add expense\n",
    "def add_expense():\n",
    "    date = date_entry.get()\n",
    "    category = category_var.get()\n",
    "    amount = amount_entry.get()\n",
    "    \n",
    "    if not date or not category or not amount:\n",
    "        messagebox.showerror(\"Error\", \"All fields are required!\")\n",
    "        return\n",
    "    \n",
    "    try:\n",
    "        amount = float(amount)\n",
    "        conn = sqlite3.connect(\"expenses.db\")\n",
    "        cursor = conn.cursor()\n",
    "        cursor.execute(\"INSERT INTO expenses (date, category, amount) VALUES (?, ?, ?)\", (date, category, amount))\n",
    "        conn.commit()\n",
    "        conn.close()\n",
    "        messagebox.showinfo(\"Success\", \"Expense added successfully!\")\n",
    "        view_expenses()\n",
    "    except ValueError:\n",
    "        messagebox.showerror(\"Error\", \"Amount must be a number!\")\n",
    "\n",
    "# Function to view expenses\n",
    "def view_expenses():\n",
    "    filter_date = date_entry.get()\n",
    "    filter_category = category_var.get()\n",
    "    \n",
    "    conn = sqlite3.connect(\"expenses.db\")\n",
    "    cursor = conn.cursor()\n",
    "    query = \"SELECT * FROM expenses\"\n",
    "    params = []\n",
    "    \n",
    "    if filter_date:\n",
    "        query += \" WHERE date = ?\"\n",
    "        params.append(filter_date)\n",
    "    elif filter_category:\n",
    "        query += \" WHERE category = ?\"\n",
    "        params.append(filter_category)\n",
    "    \n",
    "    cursor.execute(query, params)\n",
    "    records = cursor.fetchall()\n",
    "    conn.close()\n",
    "    \n",
    "    for row in tree.get_children():\n",
    "        tree.delete(row)\n",
    "    \n",
    "    for record in records:\n",
    "        tree.insert(\"\", \"end\", values=record)\n",
    "\n",
    "# Function to delete expense\n",
    "def delete_expense():\n",
    "    selected_item = tree.selection()\n",
    "    if not selected_item:\n",
    "        messagebox.showerror(\"Error\", \"No expense selected!\")\n",
    "        return\n",
    "    \n",
    "    item = tree.item(selected_item)\n",
    "    expense_id = item['values'][0]\n",
    "    \n",
    "    conn = sqlite3.connect(\"expenses.db\")\n",
    "    cursor = conn.cursor()\n",
    "    cursor.execute(\"DELETE FROM expenses WHERE id = ?\", (expense_id,))\n",
    "    conn.commit()\n",
    "    conn.close()\n",
    "    \n",
    "    messagebox.showinfo(\"Success\", \"Expense deleted successfully!\")\n",
    "    view_expenses()\n",
    "\n",
    "# Function to visualize expenses\n",
    "def open_visualization_window():\n",
    "    visualization_window = tk.Toplevel(root)\n",
    "    visualization_window.title(\"Expense Visualization\")\n",
    "    visualization_window.geometry(\"600x400\")\n",
    "    \n",
    "    conn = sqlite3.connect(\"expenses.db\")\n",
    "    cursor = conn.cursor()\n",
    "    cursor.execute(\"SELECT category, SUM(amount) FROM expenses GROUP BY category\")\n",
    "    data = cursor.fetchall()\n",
    "    conn.close()\n",
    "    \n",
    "    if not data:\n",
    "        messagebox.showerror(\"Error\", \"No data to visualize!\")\n",
    "        return\n",
    "    \n",
    "    categories, amounts = zip(*data)\n",
    "    plt.figure(figsize=(6, 4))\n",
    "    plt.pie(amounts, labels=categories, autopct=\"%.1f%%\", startangle=140)\n",
    "    plt.title(\"Expense Distribution\")\n",
    "    \n",
    "    from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\n",
    "    canvas = FigureCanvasTkAgg(plt.gcf(), master=visualization_window)\n",
    "    canvas.draw()\n",
    "    canvas.get_tk_widget().pack()\n",
    "\n",
    "# GUI Setup\n",
    "root = tk.Tk()\n",
    "root.title(\"Expense Tracker\")\n",
    "root.geometry(\"600x500\")\n",
    "\n",
    "frame = tk.Frame(root)\n",
    "frame.pack(pady=10)\n",
    "\n",
    "tl_date = tk.Label(frame, text=\"Date (YYYY-MM-DD):\")\n",
    "tl_date.grid(row=0, column=0)\n",
    "date_entry = tk.Entry(frame)\n",
    "date_entry.grid(row=0, column=1)\n",
    "\n",
    "category_var = tk.StringVar()\n",
    "category_choices = [\"Groceries\", \"Rent\", \"Entertainment\", \"Shopping\", \"Transportation\", \"Bills\", \"Other\"]\n",
    "category_var.set(category_choices[0])\n",
    "\n",
    "tl_category = tk.Label(frame, text=\"Category:\")\n",
    "tl_category.grid(row=0, column=2)\n",
    "category_dropdown = ttk.Combobox(frame, textvariable=category_var, values=category_choices)\n",
    "category_dropdown.grid(row=0, column=3)\n",
    "\n",
    "amount_label = tk.Label(frame, text=\"Amount:\")\n",
    "amount_label.grid(row=0, column=4)\n",
    "amount_entry = tk.Entry(frame)\n",
    "amount_entry.grid(row=0, column=5)\n",
    "\n",
    "add_button = tk.Button(frame, text=\"Add Expense\", command=add_expense, bg=\"green\", fg=\"white\")\n",
    "add_button.grid(row=0, column=6)\n",
    "\n",
    "view_button = tk.Button(root, text=\"View Expenses\", command=view_expenses)\n",
    "view_button.pack()\n",
    "\n",
    "delete_button = tk.Button(root, text=\"Delete Selected Expense\", command=delete_expense, bg=\"red\", fg=\"white\")\n",
    "delete_button.pack()\n",
    "\n",
    "visualize_button = tk.Button(root, text=\"Visualize Expenses\", command=open_visualization_window)\n",
    "visualize_button.pack()\n",
    "\n",
    "columns = (\"ID\", \"Date\", \"Category\", \"Amount\")\n",
    "tree = ttk.Treeview(root, columns=columns, show=\"headings\")\n",
    "for col in columns:\n",
    "    tree.heading(col, text=col)\n",
    "    tree.column(col, width=100)\n",
    "tree.pack(expand=True, fill=\"both\")\n",
    "\n",
    "view_expenses()\n",
    "root.mainloop()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e968fe66-3dc8-4eac-8497-73440aef139a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
